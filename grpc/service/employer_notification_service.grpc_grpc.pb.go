// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	domain "github.com/wanpng/notification-grpc/grpc/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployerNotificationServiceClient is the client API for EmployerNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployerNotificationServiceClient interface {
	NotifyInvitation(ctx context.Context, in *domain.InvitationResponse, opts ...grpc.CallOption) (*NotifyEmployerInvitationResponse, error)
	NotifyApplicantCount(ctx context.Context, in *domain.ApplicantCount, opts ...grpc.CallOption) (*NotifyApplicantCountResponse, error)
	NotifyInterviewSchedule(ctx context.Context, in *domain.EmployerInterviewSchedule, opts ...grpc.CallOption) (*NotifyEmployerInterviewScheduleResponse, error)
}

type employerNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployerNotificationServiceClient(cc grpc.ClientConnInterface) EmployerNotificationServiceClient {
	return &employerNotificationServiceClient{cc}
}

func (c *employerNotificationServiceClient) NotifyInvitation(ctx context.Context, in *domain.InvitationResponse, opts ...grpc.CallOption) (*NotifyEmployerInvitationResponse, error) {
	out := new(NotifyEmployerInvitationResponse)
	err := c.cc.Invoke(ctx, "/protos.service.EmployerNotificationService/NotifyInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employerNotificationServiceClient) NotifyApplicantCount(ctx context.Context, in *domain.ApplicantCount, opts ...grpc.CallOption) (*NotifyApplicantCountResponse, error) {
	out := new(NotifyApplicantCountResponse)
	err := c.cc.Invoke(ctx, "/protos.service.EmployerNotificationService/NotifyApplicantCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employerNotificationServiceClient) NotifyInterviewSchedule(ctx context.Context, in *domain.EmployerInterviewSchedule, opts ...grpc.CallOption) (*NotifyEmployerInterviewScheduleResponse, error) {
	out := new(NotifyEmployerInterviewScheduleResponse)
	err := c.cc.Invoke(ctx, "/protos.service.EmployerNotificationService/NotifyInterviewSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployerNotificationServiceServer is the server API for EmployerNotificationService service.
// All implementations must embed UnimplementedEmployerNotificationServiceServer
// for forward compatibility
type EmployerNotificationServiceServer interface {
	NotifyInvitation(context.Context, *domain.InvitationResponse) (*NotifyEmployerInvitationResponse, error)
	NotifyApplicantCount(context.Context, *domain.ApplicantCount) (*NotifyApplicantCountResponse, error)
	NotifyInterviewSchedule(context.Context, *domain.EmployerInterviewSchedule) (*NotifyEmployerInterviewScheduleResponse, error)
	mustEmbedUnimplementedEmployerNotificationServiceServer()
}

// UnimplementedEmployerNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployerNotificationServiceServer struct {
}

func (UnimplementedEmployerNotificationServiceServer) NotifyInvitation(context.Context, *domain.InvitationResponse) (*NotifyEmployerInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyInvitation not implemented")
}
func (UnimplementedEmployerNotificationServiceServer) NotifyApplicantCount(context.Context, *domain.ApplicantCount) (*NotifyApplicantCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyApplicantCount not implemented")
}
func (UnimplementedEmployerNotificationServiceServer) NotifyInterviewSchedule(context.Context, *domain.EmployerInterviewSchedule) (*NotifyEmployerInterviewScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyInterviewSchedule not implemented")
}
func (UnimplementedEmployerNotificationServiceServer) mustEmbedUnimplementedEmployerNotificationServiceServer() {
}

// UnsafeEmployerNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployerNotificationServiceServer will
// result in compilation errors.
type UnsafeEmployerNotificationServiceServer interface {
	mustEmbedUnimplementedEmployerNotificationServiceServer()
}

func RegisterEmployerNotificationServiceServer(s grpc.ServiceRegistrar, srv EmployerNotificationServiceServer) {
	s.RegisterService(&EmployerNotificationService_ServiceDesc, srv)
}

func _EmployerNotificationService_NotifyInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.InvitationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerNotificationServiceServer).NotifyInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.EmployerNotificationService/NotifyInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerNotificationServiceServer).NotifyInvitation(ctx, req.(*domain.InvitationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployerNotificationService_NotifyApplicantCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.ApplicantCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerNotificationServiceServer).NotifyApplicantCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.EmployerNotificationService/NotifyApplicantCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerNotificationServiceServer).NotifyApplicantCount(ctx, req.(*domain.ApplicantCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployerNotificationService_NotifyInterviewSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.EmployerInterviewSchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployerNotificationServiceServer).NotifyInterviewSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.EmployerNotificationService/NotifyInterviewSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployerNotificationServiceServer).NotifyInterviewSchedule(ctx, req.(*domain.EmployerInterviewSchedule))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployerNotificationService_ServiceDesc is the grpc.ServiceDesc for EmployerNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployerNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.service.EmployerNotificationService",
	HandlerType: (*EmployerNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyInvitation",
			Handler:    _EmployerNotificationService_NotifyInvitation_Handler,
		},
		{
			MethodName: "NotifyApplicantCount",
			Handler:    _EmployerNotificationService_NotifyApplicantCount_Handler,
		},
		{
			MethodName: "NotifyInterviewSchedule",
			Handler:    _EmployerNotificationService_NotifyInterviewSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service/employer_notification_service.grpc.proto",
}
