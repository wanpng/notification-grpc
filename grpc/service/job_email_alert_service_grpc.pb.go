// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	domain "github.com/wanpng/email-alert-grpc/grpc/domain"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobEmailAlertServiceClient is the client API for JobEmailAlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobEmailAlertServiceClient interface {
	SendJobInvitation(ctx context.Context, in *domain.JobInvitation, opts ...grpc.CallOption) (*JobEmailAlertResponse, error)
	SendJobApplicationStatusUpdate(ctx context.Context, in *domain.JobApplicationStatusUpdate, opts ...grpc.CallOption) (*JobEmailAlertResponse, error)
	SendJobInterviewRequest(ctx context.Context, in *domain.JobInterviewRequest, opts ...grpc.CallOption) (*JobEmailAlertResponse, error)
}

type jobEmailAlertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobEmailAlertServiceClient(cc grpc.ClientConnInterface) JobEmailAlertServiceClient {
	return &jobEmailAlertServiceClient{cc}
}

func (c *jobEmailAlertServiceClient) SendJobInvitation(ctx context.Context, in *domain.JobInvitation, opts ...grpc.CallOption) (*JobEmailAlertResponse, error) {
	out := new(JobEmailAlertResponse)
	err := c.cc.Invoke(ctx, "/protos.service.JobEmailAlertService/SendJobInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobEmailAlertServiceClient) SendJobApplicationStatusUpdate(ctx context.Context, in *domain.JobApplicationStatusUpdate, opts ...grpc.CallOption) (*JobEmailAlertResponse, error) {
	out := new(JobEmailAlertResponse)
	err := c.cc.Invoke(ctx, "/protos.service.JobEmailAlertService/SendJobApplicationStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobEmailAlertServiceClient) SendJobInterviewRequest(ctx context.Context, in *domain.JobInterviewRequest, opts ...grpc.CallOption) (*JobEmailAlertResponse, error) {
	out := new(JobEmailAlertResponse)
	err := c.cc.Invoke(ctx, "/protos.service.JobEmailAlertService/SendJobInterviewRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobEmailAlertServiceServer is the server API for JobEmailAlertService service.
// All implementations must embed UnimplementedJobEmailAlertServiceServer
// for forward compatibility
type JobEmailAlertServiceServer interface {
	SendJobInvitation(context.Context, *domain.JobInvitation) (*JobEmailAlertResponse, error)
	SendJobApplicationStatusUpdate(context.Context, *domain.JobApplicationStatusUpdate) (*JobEmailAlertResponse, error)
	SendJobInterviewRequest(context.Context, *domain.JobInterviewRequest) (*JobEmailAlertResponse, error)
	mustEmbedUnimplementedJobEmailAlertServiceServer()
}

// UnimplementedJobEmailAlertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobEmailAlertServiceServer struct {
}

func (UnimplementedJobEmailAlertServiceServer) SendJobInvitation(context.Context, *domain.JobInvitation) (*JobEmailAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobInvitation not implemented")
}
func (UnimplementedJobEmailAlertServiceServer) SendJobApplicationStatusUpdate(context.Context, *domain.JobApplicationStatusUpdate) (*JobEmailAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobApplicationStatusUpdate not implemented")
}
func (UnimplementedJobEmailAlertServiceServer) SendJobInterviewRequest(context.Context, *domain.JobInterviewRequest) (*JobEmailAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJobInterviewRequest not implemented")
}
func (UnimplementedJobEmailAlertServiceServer) mustEmbedUnimplementedJobEmailAlertServiceServer() {}

// UnsafeJobEmailAlertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobEmailAlertServiceServer will
// result in compilation errors.
type UnsafeJobEmailAlertServiceServer interface {
	mustEmbedUnimplementedJobEmailAlertServiceServer()
}

func RegisterJobEmailAlertServiceServer(s grpc.ServiceRegistrar, srv JobEmailAlertServiceServer) {
	s.RegisterService(&JobEmailAlertService_ServiceDesc, srv)
}

func _JobEmailAlertService_SendJobInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.JobInvitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobEmailAlertServiceServer).SendJobInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.JobEmailAlertService/SendJobInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobEmailAlertServiceServer).SendJobInvitation(ctx, req.(*domain.JobInvitation))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobEmailAlertService_SendJobApplicationStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.JobApplicationStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobEmailAlertServiceServer).SendJobApplicationStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.JobEmailAlertService/SendJobApplicationStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobEmailAlertServiceServer).SendJobApplicationStatusUpdate(ctx, req.(*domain.JobApplicationStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobEmailAlertService_SendJobInterviewRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.JobInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobEmailAlertServiceServer).SendJobInterviewRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.JobEmailAlertService/SendJobInterviewRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobEmailAlertServiceServer).SendJobInterviewRequest(ctx, req.(*domain.JobInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobEmailAlertService_ServiceDesc is the grpc.ServiceDesc for JobEmailAlertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobEmailAlertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.service.JobEmailAlertService",
	HandlerType: (*JobEmailAlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendJobInvitation",
			Handler:    _JobEmailAlertService_SendJobInvitation_Handler,
		},
		{
			MethodName: "SendJobApplicationStatusUpdate",
			Handler:    _JobEmailAlertService_SendJobApplicationStatusUpdate_Handler,
		},
		{
			MethodName: "SendJobInterviewRequest",
			Handler:    _JobEmailAlertService_SendJobInterviewRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service/job_email_alert_service.proto",
}
