// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobPostingNotificationServiceClient is the client API for JobPostingNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobPostingNotificationServiceClient interface {
	CloseJob(ctx context.Context, in *CloseJobRequest, opts ...grpc.CallOption) (*CloseJobResponse, error)
}

type jobPostingNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobPostingNotificationServiceClient(cc grpc.ClientConnInterface) JobPostingNotificationServiceClient {
	return &jobPostingNotificationServiceClient{cc}
}

func (c *jobPostingNotificationServiceClient) CloseJob(ctx context.Context, in *CloseJobRequest, opts ...grpc.CallOption) (*CloseJobResponse, error) {
	out := new(CloseJobResponse)
	err := c.cc.Invoke(ctx, "/protos.service.JobPostingNotificationService/CloseJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobPostingNotificationServiceServer is the server API for JobPostingNotificationService service.
// All implementations must embed UnimplementedJobPostingNotificationServiceServer
// for forward compatibility
type JobPostingNotificationServiceServer interface {
	CloseJob(context.Context, *CloseJobRequest) (*CloseJobResponse, error)
	mustEmbedUnimplementedJobPostingNotificationServiceServer()
}

// UnimplementedJobPostingNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobPostingNotificationServiceServer struct {
}

func (UnimplementedJobPostingNotificationServiceServer) CloseJob(context.Context, *CloseJobRequest) (*CloseJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseJob not implemented")
}
func (UnimplementedJobPostingNotificationServiceServer) mustEmbedUnimplementedJobPostingNotificationServiceServer() {
}

// UnsafeJobPostingNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobPostingNotificationServiceServer will
// result in compilation errors.
type UnsafeJobPostingNotificationServiceServer interface {
	mustEmbedUnimplementedJobPostingNotificationServiceServer()
}

func RegisterJobPostingNotificationServiceServer(s grpc.ServiceRegistrar, srv JobPostingNotificationServiceServer) {
	s.RegisterService(&JobPostingNotificationService_ServiceDesc, srv)
}

func _JobPostingNotificationService_CloseJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPostingNotificationServiceServer).CloseJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.service.JobPostingNotificationService/CloseJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPostingNotificationServiceServer).CloseJob(ctx, req.(*CloseJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobPostingNotificationService_ServiceDesc is the grpc.ServiceDesc for JobPostingNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobPostingNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.service.JobPostingNotificationService",
	HandlerType: (*JobPostingNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseJob",
			Handler:    _JobPostingNotificationService_CloseJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service/jobposting_notification_service.grpc.proto",
}
